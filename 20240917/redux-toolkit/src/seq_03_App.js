/**
 *  -----------------------
 *  1. Possible Exports From The *redux package: 
 *  -----------------------
 *    (01) __DO_NOT_USE__ActionTypes
 *    (02) applyMiddleware
 *    (03) bindActionCreators
 *    (04) combineReducers
 *    (05) compose
 *    (06) createStore
 *    (07) isAction
 *    (08) isPlainObject
 *    (09) legacy_createStore           <--- ***: alternative of `(06) createStore`
 * 
 *  -----------------------
 *  2. Possible Exports From The *react-redux package: 
 *  -----------------------
 *    (01) Provider                             <--- ***
 *    (02) ReactReduxContext
 *    (03) batch
 *    (04) connect
 *    (05) createDispatchHook
 *    (06) createSelectorHook
 *    (07) createStoreHook
 *    (08) shallowEqual
 *    (09) useDispatch
 *    (10) useSelector
 *    (11) useStore
 * 
 */

import { Provider } from 'react-redux';

/**
 *  -----------------------
 *  const createSlice: <State, CaseReducers, Name, Selectors extends SliceSelectors<State>, ReducerPath> 
 *      ( options: CreateSliceOptions<State, CaseReducers, Name, ReducerPath, Selectors> ) => Slice<State, CaseReducers, Name, ReducerPath, Selectors>;
 *  -----------------------
 *  A function that accepts 
 *      (1) an initial state, 
 *      (2) an object full of `reducer functions`,
 *      (3) a "slice name", 
 * 
 *  and (4) automatically generates `action creators` and `action types` that correspond to the `reducers` and `state`.
 * 
 *  -----------------------
 *  configureStore( options: ConfigureStoreOptions<...> ): EnhancedStore<...>
 *  -----------------------
 *  A friendly abstraction over the standard Redux `createStore()` function.
 * 
 *  @param options — The store configuration.
 *  @returns — A configured `Redux store`.   (***)
 *  -----------------------
 */

import { createSlice, configureStore } from '@reduxjs/toolkit';

import './App.css';
import { Counter } from './components';


console.group('- seq_03_App.js -------------');

console.log( '(01) createSlice:', createSlice );
console.log( '(02) configureStore:', configureStore );


const counterSlice = createSlice({
    name: 'counterSlice',

    initialState : { countValue: 0 },

    /**
     *  -----------------------
     *  (property) UP: ( state: WritableDraft<{ countValue: number; }>, action: { payload: any;  type: string; } ) => void
     *  -----------------------
     *  A mapping from `action types` to `action-type-specific case reducer functions`.
     *  For every action type, a `matching action creator` will be generated using `*createAction()`.
     *  -----------------------
     */

    reducers: {

        UP: ( state, action ) => {
            console.debug('counterSlice::UP-actionType-reducer( state:', state, ', action:', action,  ' ) invoked.');

            // *Important1: When using `@reduxtjs/toolkit` (RTK), it could be updated the specified state *directly *without Immutability.  (***)
            // *Important2: void 0 === undefined (true). (***)
            
            if( action.step !== void 0 ) state.countValue += action.step;
            if( action.payload !== void 0 ) state.countValue += action.payload;
        },

    },
});

console.log( '(03) counterSlice:', counterSlice );

/**
 *  ----------------------
 *  Slice.reducer: Reducer<State> - The `slice`'s reducer.
 *  ----------------------
 *  Important: this single reducer is automatically generated by RTK  
 *                    in way of merging all reducers defined by action types with `combineReducers()` in a `Slice`.
 */      
console.log( '(04) counterSlice.reducer:', counterSlice.reducer);

// Slice.actions: Action creators for the types of actions that are handled by the slice reducer.
//                       Action creator list: { actionType1: f actionCreator(...args), actionType2: f actionCreator(...args), ... }
console.log( '(05) counterSlice.actions:', counterSlice.actions);                

// Slice.actions.actionType = f actionCreator(...args)
console.log( '(06) counterSlice.actions.UP:', counterSlice.actions.UP );


const reduxStore = configureStore({

    // (1) A `single` reducer function that will be used as the `root reducer`, or
    // (2) an object of `slice` reducers that will be passed to `combineReducers()`.

    reducer: {
        /**
         *  ----------------------
         *  Slice.reducer: Reducer<State> - The `slice`'s reducer.
         *  ----------------------
         *  Important: this single reducer is automatically generated by RTK  
         *                    in way of merging all reducers defined by action types with `combineReducers()` in a `Slice`.
         */      
        counter: counterSlice.reducer,
    }

});

console.log( '(07) reduxStore:', reduxStore );

console.groupEnd();


function App() {
    console.group('App() invoked.'); console.groupEnd();

    return (
        <Provider store={ reduxStore }>
            <div className="App">
                <Counter />
            </div>
        </Provider>
    );
}


export default App;

// export default App, { counterSlice };        // XX
export { counterSlice };

